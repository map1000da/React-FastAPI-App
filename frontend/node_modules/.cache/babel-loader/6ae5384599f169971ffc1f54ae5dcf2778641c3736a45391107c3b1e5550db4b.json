{"ast":null,"code":"var _jsxFileName = \"/Users/sendateppei/Desktop/ChatGPT\\u4F7F\\u3063\\u3066\\u5B66\\u3075\\u3099/react-user_management/src/providers/LoginUserProvider.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//コンテキスト：データをpropを使用しず，コンポーネントツリー全体で共有する方法\nconst LoginUserContext = /*#__PURE__*/createContext({});\n\n//プロバイダー：コンテキストの値をコンポーネントツリーの仮想に提供するコンポーネント\n//今回は子コンポーネントにloginuserとsetLoginUserの値を提供する\nexport const LoginUserProvider = props => {\n  _s();\n  const {\n    children\n  } = props;\n  const [loginUser, setLoginUser] = useState(null);\n  return /*#__PURE__*/_jsxDEV(LoginUserContext.Provider, {\n    value: {\n      loginUser,\n      setLoginUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginUserProvider, \"ocTEO6sXRoxGC0Cs9JxC3OHDZM0=\");\n_c = LoginUserProvider;\nvar _c;\n$RefreshReg$(_c, \"LoginUserProvider\");","map":{"version":3,"names":["createContext","useState","jsxDEV","_jsxDEV","LoginUserContext","LoginUserProvider","props","_s","children","loginUser","setLoginUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sendateppei/Desktop/ChatGPT使って学ぶ/react-user_management/src/providers/LoginUserProvider.tsx"],"sourcesContent":["import { User } from \"../types/api/user\";\nimport {\n  createContext,\n  Dispatch,\n  ReactNode,\n  SetStateAction,\n  useState,\n} from \"react\";\n\ntype LoginUserContextType = {\n  loginUser: User | null;\n  setLoginUser: Dispatch<SetStateAction<User | null>>; //型定義：<User | null>の値を引数として受け取り　新しい<User | null>型の状態を返す関数\n};\n\n//コンテキスト：データをpropを使用しず，コンポーネントツリー全体で共有する方法\nconst LoginUserContext = createContext<LoginUserContextType>(\n  {} as LoginUserContextType\n);\n\n//プロバイダー：コンテキストの値をコンポーネントツリーの仮想に提供するコンポーネント\n//今回は子コンポーネントにloginuserとsetLoginUserの値を提供する\nexport const LoginUserProvider = (props: { children: ReactNode }) => {\n  const { children } = props;\n  const [loginUser, setLoginUser] = useState<User | null>(null);\n\n  return (\n    <LoginUserContext.Provider value={{ loginUser, setLoginUser }}>\n      {children}\n    </LoginUserContext.Provider>\n  );\n};\n"],"mappings":";;AACA,SACEA,aAAa,EAIbC,QAAQ,QACH,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOf;AACA,MAAMC,gBAAgB,gBAAGJ,aAAa,CACpC,CAAC,CACH,CAAC;;AAED;AACA;AACA,OAAO,MAAMK,iBAAiB,GAAIC,KAA8B,IAAK;EAAAC,EAAA;EACnE,MAAM;IAAEC;EAAS,CAAC,GAAGF,KAAK;EAC1B,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAc,IAAI,CAAC;EAE7D,oBACEE,OAAA,CAACC,gBAAgB,CAACO,QAAQ;IAACC,KAAK,EAAE;MAAEH,SAAS;MAAEC;IAAa,CAAE;IAAAF,QAAA,EAC3DA;EAAQ;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAACT,EAAA,CATWF,iBAAiB;AAAAY,EAAA,GAAjBZ,iBAAiB;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}